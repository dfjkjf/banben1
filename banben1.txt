1.设置一下用户名和邮箱
    $ git config --global user.name "your name"
    $ git config --global user.email "your mailbox"
  1.1版本库也叫仓库，英文是repository

2.工作区和版本库
    在Git中，有两个工作的部分：
    第一个部分叫工作区，也就是从目录打开的部分；
    第二个部分叫做版本库，也就是在工作区中有一个 .git 的目录，这个目录正常是隐藏的。
    在版本库中还有两个部分，第一部分叫 Stage，也就是暂存区，第二部分是 Git 为我们创造的 Master 目录。
  2.1用 git status 查看一下状态；
       使用 git add 将其添加到版本库中的 Stage 暂存区；
       最后我们在使用 git commit（-m ''方便 git log），一个文件才正式地进入版本库。
  2.2用 git diff 的方式来查看版本库中的文件和工作区中的文件是否有不同

3.我们开始修改文件，展示 Git 管理文件的强大之处
    git log（--pretty=oneline）：由近到远的显示我们的修改
    git reset --hard comment_id：回退到任一版本（回到过去）
    gir reflog：查找所有版本，方便从过去到未来

4.创建SSH密钥并更新至Github
    前文我们已经讲过了如何在本地上使用Git，但是Git最厉害的地方并不在于从本地使用，而是在于其支持协同工作，以及Github的简单上传和下载。
  4.1初次使用Git来配置密钥一般需要三步：
      生成密钥：生成密钥的语句如下$ ssh-keygen -t rsa -C "email@youremail.com"；vi ~/.ssh/id_rsa.pub
      设置远程仓库的密钥：登录
Github，点击右上角头像旁边的倒三角
选择其中的Settings
，在左边的项目栏里选择SSH and GPG keys，
点击New SSH              keys
把刚才复制下来的sSSH keys粘贴进去即可，title写不写都行，在设置好了之后，我们检擦一下密钥有没有生效。

$ ssh -T git@github.com
      修改git的remote url：git remote -v 查看远程地址，$ git remote set-url origin git@github.com:account/project.git

5.Git与Github：添加远程库从Github中下载文件


    $ git remote add origin git@github.com:.../first_git.git  #连接远程库和版本库
1
    $ git push origin master    #将版本库的内容推到远程库

    
$ git clone git@github.com:.../learngit.git  #从远程库中克隆
————————————————

载库的时候只下载最新的那个库，可以使用这个命令：
git clone git仓库地址 --depth=1
这样就只下载到最新版本，而不是带有全部历史版本的仓库。


海军上将光之翼

http://rogerdudler.github.io/git-guide/index.zh.html
https://blog.csdn.net/Innost/article/details/52583732
https://www.cnblogs.com/collectionne/p/6617364.html
https://blog.csdn.net/flycatdeng/article/details/82665041
https://www.cnblogs.com/pugang/category/327179.html
https://www.cnblogs.com/mazhenyu/

1.开放扩展程序项目，方便用户自定义插件
      由于VS功能的不断完善，VS集成的功能也越来越多，但是再多的功能也无法满足所有用户的特定需求，VS提供的扩展程序项目正好满足了这种需求。用户可以根据需要，设计满足自己需求的功能，然后通过扩展项目可以很容易地集成到VS中



2.配合TFS团队协作工具，提升开发人员的效率
       VS2015集成了自己的Team Foundation Server (TFS)团队协作项目，VS通过团队资源管理器建立与TFS项目的连接，用户可以很方便的查看TFS上的相关任务信息，这样就避免了TFS与VS之间频繁的切换，一方面节约了时间，另一方面用户在VS上就能看到TFS上的信息，显得更加直观，增强了短时记忆的能力，避免了在TFS上查看任务后转到VS上又遗忘了某些信息的可能。



3.Nuget工具，快速包含第三方库，免除手工添加的烦恼
       在项目开发的过程中，需要引用第三方库Newtonsoft.json库来对JSON文件进行解析，由于之前还不知道Nuget的功能，所以采用最笨的方法，从提供Newtonsoft.json的官网下载下来这个第三方库，然后通过“引用”，将这个第三方dll程序集手动添加到项目中来，才能成功使用这个第三方库提供的功能，这样不但操作麻烦，而且同一项目组的同事整合项目的时候，也需要重复相同的步骤，才能成功部署项目。后来，通过学习借鉴发现，VS提供了包管理功能，用户很方便地就可以安装第三方库，并且避免了手工添加引起的不便。



4.快速操作与重构，提高代码构建效率
       VS提供了一个“快速操作与重构”的快捷方式，当用户在使用一个尚未声明的类型时，用户将鼠标放到该类型后，类型前方会出现一个提醒图标，用户可以根据提示进行选择，是引用系统提供的类型，还是生成一个类型？如果是引用系统类型，会通过“using”进行引用，如果是生成一个类型，系统会快速地在新文件中为用户构建一个新类型。这在很大程度上提高了编码人员的开发效率。



5.实时变更错误信息数量，方便用户查看问题修复进度
        另外，VS提供了一个的实时变更错误信息的数量，用户在调试的时候，能够很方便地看到问题的修复进展，提高调试的效率。下图介绍了在189行后添加了“;”后，错误数量实时地从3变更为2。



6.快速查看变量、函数的定义以及声明，避免切换文件带来的不便
       VS可以使用“速览定义”功能，不用进行页面跳转就能查看某个变量或者函数的定义，这减少了频繁的页面跳转而导致的文件混乱，给“看”代码提供了很大的便利。



不足之处：

任何一个工具都不可能100%的完美，VS2015也不例外

1.体量太大，占据太多的存储空间
       第一次使用VS2015时，惊讶的发现安装好完整的VS2015竟然需要10多个G的存储空间，这对于一般的用户来说体量太大，对内存的容量要求太高。这是VS不断完善和不断集成各种功能的结果，也正是如此才导致了性能上的缺陷。对于特定开发人员，比如我司，VS2015中存在很多冗余的功能，如果能去其冗余，取其精华为我所用，相信会大大提高研发人员的开发效率。

2.扩展程序没能提供自定义卸载入口，增加了卸载特定内容的难度
        VS2015提供了扩展项目，用户可以根据自己特定的需求，来开发自定义的插件，但是对于插件的卸载，VS没有提供入口，这增加了卸载特定内容的难度，如果能开放入口，用户的开发将会变得更加灵活。
